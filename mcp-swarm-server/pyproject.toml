[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-swarm-server"
version = "0.1.0"
description = "MCP Swarm Intelligence Server - Collective intelligence for multi-agent coordination"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MCP Swarm Development Team", email = "dev@mcpswarm.com"}
]
keywords = [
    "mcp", "model-context-protocol", "swarm-intelligence", 
    "multi-agent", "collective-intelligence", "ai-coordination"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # "mcp>=1.0.0",  # Optional for testing - fallback implementation provided
    "asyncio-mqtt>=0.16.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "aiosqlite>=0.19.0",
    "pydantic>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "networkx>=3.1.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
]

[project.urls]
Homepage = "https://github.com/mcp-swarm/mcp-swarm-server"
Repository = "https://github.com/mcp-swarm/mcp-swarm-server"
Documentation = "https://mcp-swarm.readthedocs.io"
Issues = "https://github.com/mcp-swarm/mcp-swarm-server/issues"

[project.scripts]
mcp-swarm = "mcp_swarm.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mcp_swarm = ["*.sql", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_swarm"]
known_third_party = ["mcp", "numpy", "scipy", "aiosqlite", "pydantic", "fastapi"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "scikit-learn.*",
    "scipy.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=mcp_swarm",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "swarm: marks tests related to swarm intelligence",
    "memory: marks tests related to memory management",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/mcp_swarm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "src/tests"]
skips = ["B101"]  # Skip assert_used test in tests

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {repo = "https://github.com/psf/black", rev = "23.7.0", hooks = [{id = "black"}]},
    {repo = "https://github.com/pycqa/isort", rev = "5.12.0", hooks = [{id = "isort"}]},
    {repo = "https://github.com/pycqa/flake8", rev = "6.0.0", hooks = [{id = "flake8"}]},
    {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.5.0", hooks = [{id = "mypy"}]},
]